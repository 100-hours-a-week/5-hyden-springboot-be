name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew clean build

#      # Docker 이미지 Build
#    - name: docker image build
#      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/spring-ggangtong .

#      # DockerHub Login (push 하기 위해)
#    - name: docker login
#      uses: docker/login-action@v3.2.0
#      with:
#        username: ${{ secrets.DOCKERHUB_USERNAME }}
#        password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      # Docker hub 로 push
#    - name: Docker Hub push
#      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-ggangtong


    # Image push to AWS ECR
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build Docker Image
      run: docker build -t hyden-server .
    - name: Docker image tagging
      run: docker tag hyden-server:latest 527078100140.dkr.ecr.ap-northeast-2.amazonaws.com/hyden-server:latest
    - name : Docker push to ECR
      run: docker push 527078100140.dkr.ecr.ap-northeast-2.amazonaws.com/hyden-server:latest

    - name: List build directory
      run: ls -al build/libs

    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: build-artifact
        path: build/libs/app.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: build-artifact

    - name: List current directory
      run: ls -al

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Add EC2 host to known_hosts
      run: |
        ssh-keyscan -H ${{ secrets.EB_EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Verify SSH connection and copy nginx configuration
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EB_EC2_USER }}@${{ secrets.EB_EC2_HOST }} echo "SSH connection successful"
        scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa nginx-conf/elasticbeanstalk-nginx-docker-upstream.conf ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/etc/nginx/conf.d/elasticbeanstalk-nginx-docker-upstream.conf

#    - name: Copy JAR to EC2
#      run: |
#        scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa helloworld-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/helloworld-0.0.1-SNAPSHOT.jar

#    - name: SSH and Run JAR
#      run: |
#        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
#          nohup java -jar /home/${{ secrets.EC2_USER }}/helloworld-0.0.1-SNAPSHOT.jar > /home/${{ secrets.EC2_USER }}/helloworld.log 2>&1 &
#        EOF

#      # Image pull from AWS ECR
#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v4
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ap-northeast-2
#
#    - name: Login to ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1
#
#    - name : Docker pull from ECR
#      run: docker pull 527078100140.dkr.ecr.ap-northeast-2.amazonaws.com/hyden-server:latest

#    - name: SSH and Deploy Docker
#      run: |
#        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
#          # Docker Pull
#          # sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-ggangtong
#          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 527078100140.dkr.ecr.ap-northeast-2.amazonaws.com
#          sudo docker pull 527078100140.dkr.ecr.ap-northeast-2.amazonaws.com/hyden-server:latest
#          ls -al
#          # Docker Stop Container if exists
#          # if [ $(sudo docker ps -a -q -f name=spring-ggangtong) ]; then
#            sudo docker stop spring-ggangtong
#          fi
#
#          # Docker Run New Container
#          sudo docker run --rm -it -d -p 8083:8090 --name spring-ggangtong ${{ secrets.DOCKERHUB_USERNAME }}/spring-ggangtong
#
#          # Delete Old Docker Image
#          sudo docker system prune -f
#        EOF

#    - name: SSH and Deploy Docker
#      run: |
#        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
#          # Docker login to aws
#          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 527078100140.dkr.ecr.ap-northeast-2.amazonaws.com
#
#          # Docker Pull
#          sudo docker pull 527078100140.dkr.ecr.ap-northeast-2.amazonaws.com/hyden-server:latest
#
#          # Docker Stop Container if exists
#          if [ $(sudo docker ps -a -q -f name=hyden-server) ]; then
#            sudo docker stop hyden-server
#          fi
#
#          # Docker Run New Container
#          sudo docker run --rm -it -d -p 8083:8090 --name hyden-server 527078100140.dkr.ecr.ap-northeast-2.amazonaws.com/hyden-server
#
#          # Delete Old Docker Image
#          sudo docker system prune -f
#        EOF



    - name: SSH and Deploy Docker
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EB_EC2_USER }}@${{ secrets.EB_EC2_HOST }} << 'EOF'
          
          # Docker login to aws
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_HOST }}/${{ secrets.ECR_NAME }}

          # Docker Pull
          docker pull ${{ secrets.ECR_HOST }}/${{ secrets.ECR_NAME }}
          docker ps -a
          # Docker Stop Container if exists
          if [ $(sudo docker ps -a -q -f name=hyden-server) ]; then
            docker stop hyden-server
          fi

          # Docker Run New Container
          docker run --rm -it -d -p 8083:8090 --name hyden-server ${{ secrets.ECR_HOST }}/${{ secrets.ECR_NAME }}
          
          # Delete Old Docker Image
          docker system prune -f
          sudo service nginx reload
        
        EOF
